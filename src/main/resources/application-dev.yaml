spring:
  datasource:
    username: h2
    password: h2
    url: jdbc:h2:mem:h2db
    driver-class-name: org.h2.Driver
  jpa:
    hibernate:
      ddl-auto: create-drop
    show-sql: true
    open-in-view: true
    database-platform: org.hibernate.dialect.H2Dialect

  config:
    import: "file:/home/developer/java_projects/credentials.properties"
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${oauth2.google.client-id}
            client-secret: ${oauth2.google.client-secret}
            scope:
              - email
              - profile
              - openid
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            client-authentication-method: client_secret_post
            authorization-grant-type: authorization_code
          github:
            client-id: ${oauth2.github.client-id}
            client-secret: ${oauth2.github.client-secret}
            scope:
              - read:user
              - user:email
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            client-authentication-method: client_secret_post
            authorization-grant-type: authorization_code
  docker:
    compose:
      enabled: true
      file: docker-compose.yaml
      lifecycle-management: start_and_stop
  data:
    redis:
      port: 6379
      host: localhost